package com.ctfo.util;import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Properties;import org.apache.commons.lang.StringUtils;import org.mongodb.morphia.Datastore;import org.mongodb.morphia.Morphia;import com.ctfo.file.property.MongoProperties;import com.mongodb.DB;import com.mongodb.MongoClient;import com.mongodb.MongoCredential;import com.mongodb.MongoException;import com.mongodb.ServerAddress;import com.mongodb.gridfs.GridFS;public class MongoDatasource {		private static EnvironmentUtil env = EnvironmentUtil.getInstance("mongodb.properties");	private static Map<String,MongoProperties> props;	private static Map<String, MongoClient> mongos;	private static Morphia morphia;	private static Map<String, Datastore> datastores;	private String datasourceName;	public MongoDatasource(){		this.datasourceName = getDefaultDatasource();		syncInit();	}		public MongoDatasource(String datasourceName){		this.datasourceName = StringUtils.isBlank(datasourceName) ? getDefaultDatasource() : datasourceName;		syncInit();	}		private static synchronized void syncInit(){		if(props == null){ 			setProps(new HashMap<String, MongoProperties>());			String [] datasources = env.getPropertyValue("DATA_SOURCES").split(",");			for(String datasource : datasources){				props.put(datasource, convertProperties(datasource, env.getProperties()));			}		}	}		public synchronized MongoClient getMongo() {		if(mongos == null) mongos = new HashMap<String, MongoClient>();		if(mongos.get(datasourceName) == null || mongos.get(datasourceName).getAddress() == null /*|| !mongos.get(datasourceName).getConnector().isOpen()*/){			try{				MongoProperties mongoProperties = props.get(datasourceName);				String database = mongoProperties.getDbName();				String userName = mongoProperties.getUserName();				String _password = mongoProperties.getUserPwd();				if(StringUtils.isBlank(userName) && StringUtils.isBlank(_password)){					mongos.put(datasourceName, new MongoClient(mongoProperties.getAddresses(), mongoProperties.getMongoOption()));				}else if(!StringUtils.isBlank(userName) && !StringUtils.isBlank(_password)){					// 使用拥有权限的用户登录Mongo				    // 修改时间：2015-10-23 sunchuanfu					char[] password = _password.toCharArray();					MongoCredential credential = MongoCredential.createCredential(userName, database, password);					mongos.put(datasourceName, new MongoClient(mongoProperties.getAddresses(), Arrays.asList(credential), mongoProperties.getMongoOption()));				}else{					throw new MongoException("Username or password of Mongodb seens wrong......");				}			}catch(MongoException e){				throw new MongoException("Failed to initialize MongoDB connection pool called \"" + datasourceName+"\", please check the configuration file \"mongodb.properties\".", e);			}		}		return mongos.get(datasourceName);	}		public synchronized Datastore getDatastore(Class<?> clazz){		return getDatastore(props.get(datasourceName).getDbName(), clazz);	}		public synchronized Datastore getDatastore(String mongoDBName, Class<?> clazz){		/*if(datastores==null) datastores = new HashMap<String, Datastore>();		Datastore ds = datastores.get(datasourceName);		if(ds == null || !ds.getDB().getName().equalsIgnoreCase(mongoDBName)){			Mongo mongo = getMongo();			ds = getMorphia().createDatastore(mongo, mongoDBName);			System.out.println("Create datastore connection called \"" + mongoDBName +"\"......");			if(clazz!=null) getMorphia().map(clazz);			ds.ensureIndexes();			ds.ensureCaps();			datastores.put(datasourceName, ds);		}		return datastores.get(datasourceName);*/				MongoClient mongo = getMongo();		Datastore ds = getMorphia().createDatastore(mongo, mongoDBName);//		System.out.println("Create datastore connection called \"" + mongoDBName +"\"......");		if(clazz!=null) getMorphia().map(clazz);		ds.ensureIndexes();		ds.ensureCaps();		return ds;	}		public synchronized Morphia getMorphia(){		if(morphia == null){			return new Morphia();		}		return morphia;	}		/**	 * 获得默认Mongodb数据库DB	 * @return	 */	public synchronized DB getDB() {		return getDB(props.get(datasourceName).getDbName());	}		/**	 * 获得名为dbName的Mongodb数据库DB	 * @param dbName	 * @return	 */	public synchronized DB getDB(String dbName){		return dbName == null ? getDB() : getMongo().getDB(dbName);	}		/**	 * 获得默认Mongodb数据库的默认文件存储路径（photo）的GridFS	 * @return	 */	public synchronized GridFS getGridFS(){		return getGridFS(props.get(datasourceName).getDbName(), props.get(datasourceName).getPicAddress());	}		/**	 * 获得敏给dbName的Mongodb数据库的以fileTableName为文件存储路径的GridFS	 * @param dbName	 * @param fileTableName	 * @return	 */	public synchronized GridFS getGridFS(String dbName, String fileTableName) {		return new GridFS(getDB(dbName), fileTableName);	}		private static MongoProperties convertProperties(String datasource, Properties properties){		MongoProperties prop = new MongoProperties();		try{			prop.setAddresses(getAddresses((String)properties.get(datasource + ".MONGODB-ADDRESSES")));			prop.setConnectionsPerHost(Integer.parseInt((String)properties.get(datasource + ".CONNECTIONS_PER_HOST")));			prop.setConnectTimeout(Integer.parseInt((String)properties.get(datasource + ".CONNECT_TIMEOUT")));			prop.setDbName((String)properties.get(datasource + ".MONGO_DB_DBNAME"));			prop.setDocAddress((String)properties.get(datasource + ".MONGO_DB_DOC_ADDRESS"));			prop.setDocExt((String)properties.get(datasource + ".DOC_EXT"));			prop.setDomainName((String)properties.get(datasource + ".DOMAIN_NAME"));			prop.setPicAddress((String)properties.get(datasource + ".MONGO_DB_PIC_ADDRESS"));			prop.setFileExt((String)properties.get(datasource + ".FILE_EXT"));			prop.setMaxWaitTime(Integer.parseInt((String)properties.get(datasource + ".MAX_WAIT_TIME")));			prop.setPicExt((String)properties.get(datasource + ".PIC_EXT"));			prop.setSocketTimeout(Integer.parseInt((String)properties.get(datasource + ".SOCKET_TIMEOUT")));			prop.setThreadsAllowedToBlockForConnectionMultiplier(Integer.parseInt((String)properties.get(datasource + ".THREADS_ALLOWED_TO_BLOCK")));			prop.setUserName((String)properties.get(datasource + ".USER_NAME"));			prop.setUserPwd((String)properties.get(datasource + ".USER_PWD"));		}catch(NullPointerException e){			throw new MongoException("The configurations of Mongodb are invalid, please check the configuration file \"mongodb.properties\".", e);		}catch(NumberFormatException e){			throw new MongoException("The configurations of Mongodb are invalid, please check the configuration file \"mongodb.properties\".", e);		}		return prop;	}		private static List<ServerAddress> getAddresses(String addresses) {		List<ServerAddress> result = new ArrayList<ServerAddress>();		for(String address : addresses.split(" ")){			String add[] = address.split(":");			try {				ServerAddress serverAddress = new ServerAddress(add[0], Integer.parseInt(add[1]));				result.add(serverAddress);			} catch (NumberFormatException e) {				throw new MongoException("The configurations of Mongodb address are invalid, please check the configuration file \"mongodb.properties\".!", e);			}		}		return result;	}	public Map<String,MongoProperties> getProps() {		return props;	}	public static void setProps(Map<String,MongoProperties> props) {		MongoDatasource.props = props;	}		public static String getDefaultDatasource(){		String datasources = env.getPropertyValue("DATA_SOURCES");		if(!StringUtils.isBlank(datasources)){			return datasources.split(",")[0];		}		return "";	}}