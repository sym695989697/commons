package com.ctfo.generated_src.bean;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InvokeLogExampleExtended implements Serializable {

	/**
	 * This field was generated by Abator for iBATIS. This field corresponds to the database table QUARTZ.QRTZ_INVOKE_LOG
	 * @abatorgenerated  Tue Mar 03 16:40:13 CST 2015
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Abator for iBATIS. This field corresponds to the database table QUARTZ.QRTZ_INVOKE_LOG
	 * @abatorgenerated  Tue Mar 03 16:40:13 CST 2015
	 */
	protected List oredCriteria;
	/**
	 * This field was generated by Abator for iBATIS. This field corresponds to the database table QUARTZ.QRTZ_INVOKE_LOG
	 * @abatorgenerated  Tue Mar 03 16:40:13 CST 2015
	 */
	protected String selectedField;
	/**
	 * This field was generated by Abator for iBATIS. This field corresponds to the database table QUARTZ.QRTZ_INVOKE_LOG
	 * @abatorgenerated  Tue Mar 03 16:40:13 CST 2015
	 */
	protected int skipNum;
	/**
	 * This field was generated by Abator for iBATIS. This field corresponds to the database table QUARTZ.QRTZ_INVOKE_LOG
	 * @abatorgenerated  Tue Mar 03 16:40:13 CST 2015
	 */
	protected int endNum;
	/**
	 * This field was generated by Abator for iBATIS. This field corresponds to the database table QUARTZ.QRTZ_INVOKE_LOG
	 * @abatorgenerated  Tue Mar 03 16:40:13 CST 2015
	 */
	protected int limitNum;

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table QUARTZ.QRTZ_INVOKE_LOG
	 * @abatorgenerated  Tue Mar 03 16:40:13 CST 2015
	 */
	public InvokeLogExampleExtended() {
		oredCriteria = new ArrayList();
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table QUARTZ.QRTZ_INVOKE_LOG
	 * @abatorgenerated  Tue Mar 03 16:40:13 CST 2015
	 */
	protected InvokeLogExampleExtended(InvokeLogExampleExtended example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table QUARTZ.QRTZ_INVOKE_LOG
	 * @abatorgenerated  Tue Mar 03 16:40:13 CST 2015
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table QUARTZ.QRTZ_INVOKE_LOG
	 * @abatorgenerated  Tue Mar 03 16:40:13 CST 2015
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table QUARTZ.QRTZ_INVOKE_LOG
	 * @abatorgenerated  Tue Mar 03 16:40:13 CST 2015
	 */
	public List getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table QUARTZ.QRTZ_INVOKE_LOG
	 * @abatorgenerated  Tue Mar 03 16:40:13 CST 2015
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table QUARTZ.QRTZ_INVOKE_LOG
	 * @abatorgenerated  Tue Mar 03 16:40:13 CST 2015
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table QUARTZ.QRTZ_INVOKE_LOG
	 * @abatorgenerated  Tue Mar 03 16:40:13 CST 2015
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table QUARTZ.QRTZ_INVOKE_LOG
	 * @abatorgenerated  Tue Mar 03 16:40:13 CST 2015
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table QUARTZ.QRTZ_INVOKE_LOG
	 * @abatorgenerated  Tue Mar 03 16:40:13 CST 2015
	 */
	public void setSelectedField(String selectedField) {
		this.selectedField = selectedField;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table QUARTZ.QRTZ_INVOKE_LOG
	 * @abatorgenerated  Tue Mar 03 16:40:13 CST 2015
	 */
	public String getSelectedField() {
		return selectedField;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table QUARTZ.QRTZ_INVOKE_LOG
	 * @abatorgenerated  Tue Mar 03 16:40:13 CST 2015
	 */
	public static String tableName() {
		return "QRTZ_INVOKE_LOG";
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table QUARTZ.QRTZ_INVOKE_LOG
	 * @abatorgenerated  Tue Mar 03 16:40:13 CST 2015
	 */
	public static String daoInterface() {
		return "com.ctfo.quartz.dao.InvokeLogDAO";
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table QUARTZ.QRTZ_INVOKE_LOG
	 * @abatorgenerated  Tue Mar 03 16:40:13 CST 2015
	 */
	public void setSkipNum(int skipNum) {
		this.skipNum = skipNum;
		this.endNum = this.skipNum + this.limitNum + 1;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table QUARTZ.QRTZ_INVOKE_LOG
	 * @abatorgenerated  Tue Mar 03 16:40:13 CST 2015
	 */
	public int getSkipNum() {
		return this.skipNum;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table QUARTZ.QRTZ_INVOKE_LOG
	 * @abatorgenerated  Tue Mar 03 16:40:13 CST 2015
	 */
	public void setEndNum(int endNum) {
		this.endNum = endNum;
		this.limitNum = this.endNum - this.skipNum - 1;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table QUARTZ.QRTZ_INVOKE_LOG
	 * @abatorgenerated  Tue Mar 03 16:40:13 CST 2015
	 */
	public int getEndNum() {
		return this.endNum;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table QUARTZ.QRTZ_INVOKE_LOG
	 * @abatorgenerated  Tue Mar 03 16:40:13 CST 2015
	 */
	public void setLimitNum(int limitNum) {
		this.limitNum = limitNum;
		this.endNum = this.skipNum + this.limitNum + 1;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table QUARTZ.QRTZ_INVOKE_LOG
	 * @abatorgenerated  Tue Mar 03 16:40:13 CST 2015
	 */
	public int getLimitNum() {
		return this.limitNum;
	}

	/**
	 * This class was generated by Abator for iBATIS. This class corresponds to the database table QUARTZ.QRTZ_INVOKE_LOG
	 * @abatorgenerated  Tue Mar 03 16:40:13 CST 2015
	 */
	public static class Criteria implements Serializable {
		protected List criteriaWithoutValue;
		protected List criteriaWithSingleValue;
		protected List criteriaWithListValue;
		protected List criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList();
			criteriaWithSingleValue = new ArrayList();
			criteriaWithListValue = new ArrayList();
			criteriaWithBetweenValue = new ArrayList();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition, List values,
				String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List list = new ArrayList();
			list.add(value1);
			list.add(value2);
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		public Criteria andIdIsNull() {
			addCriterion("ID is null");
			return this;
		}

		public Criteria andIdIsNotNull() {
			addCriterion("ID is not null");
			return this;
		}

		public Criteria andIdEqualTo(String value) {
			addCriterion("ID =", value, "id");
			return this;
		}

		public Criteria andIdNotEqualTo(String value) {
			addCriterion("ID <>", value, "id");
			return this;
		}

		public Criteria andIdGreaterThan(String value) {
			addCriterion("ID >", value, "id");
			return this;
		}

		public Criteria andIdGreaterThanOrEqualTo(String value) {
			addCriterion("ID >=", value, "id");
			return this;
		}

		public Criteria andIdLessThan(String value) {
			addCriterion("ID <", value, "id");
			return this;
		}

		public Criteria andIdLessThanOrEqualTo(String value) {
			addCriterion("ID <=", value, "id");
			return this;
		}

		public Criteria andIdLike(String value) {
			addCriterion("ID like", value, "id");
			return this;
		}

		public Criteria andIdNotLike(String value) {
			addCriterion("ID not like", value, "id");
			return this;
		}

		public Criteria andIdIn(List values) {
			addCriterion("ID in", values, "id");
			return this;
		}

		public Criteria andIdNotIn(List values) {
			addCriterion("ID not in", values, "id");
			return this;
		}

		public Criteria andIdBetween(String value1, String value2) {
			addCriterion("ID between", value1, value2, "id");
			return this;
		}

		public Criteria andIdNotBetween(String value1, String value2) {
			addCriterion("ID not between", value1, value2, "id");
			return this;
		}

		public Criteria andStatusIsNull() {
			addCriterion("STATUS is null");
			return this;
		}

		public Criteria andStatusIsNotNull() {
			addCriterion("STATUS is not null");
			return this;
		}

		public Criteria andStatusEqualTo(String value) {
			addCriterion("STATUS =", value, "status");
			return this;
		}

		public Criteria andStatusNotEqualTo(String value) {
			addCriterion("STATUS <>", value, "status");
			return this;
		}

		public Criteria andStatusGreaterThan(String value) {
			addCriterion("STATUS >", value, "status");
			return this;
		}

		public Criteria andStatusGreaterThanOrEqualTo(String value) {
			addCriterion("STATUS >=", value, "status");
			return this;
		}

		public Criteria andStatusLessThan(String value) {
			addCriterion("STATUS <", value, "status");
			return this;
		}

		public Criteria andStatusLessThanOrEqualTo(String value) {
			addCriterion("STATUS <=", value, "status");
			return this;
		}

		public Criteria andStatusLike(String value) {
			addCriterion("STATUS like", value, "status");
			return this;
		}

		public Criteria andStatusNotLike(String value) {
			addCriterion("STATUS not like", value, "status");
			return this;
		}

		public Criteria andStatusIn(List values) {
			addCriterion("STATUS in", values, "status");
			return this;
		}

		public Criteria andStatusNotIn(List values) {
			addCriterion("STATUS not in", values, "status");
			return this;
		}

		public Criteria andStatusBetween(String value1, String value2) {
			addCriterion("STATUS between", value1, value2, "status");
			return this;
		}

		public Criteria andStatusNotBetween(String value1, String value2) {
			addCriterion("STATUS not between", value1, value2, "status");
			return this;
		}

		public Criteria andTriggerTimeIsNull() {
			addCriterion("TRIGGER_TIME is null");
			return this;
		}

		public Criteria andTriggerTimeIsNotNull() {
			addCriterion("TRIGGER_TIME is not null");
			return this;
		}

		public Criteria andTriggerTimeEqualTo(Long value) {
			addCriterion("TRIGGER_TIME =", value, "triggerTime");
			return this;
		}

		public Criteria andTriggerTimeNotEqualTo(Long value) {
			addCriterion("TRIGGER_TIME <>", value, "triggerTime");
			return this;
		}

		public Criteria andTriggerTimeGreaterThan(Long value) {
			addCriterion("TRIGGER_TIME >", value, "triggerTime");
			return this;
		}

		public Criteria andTriggerTimeGreaterThanOrEqualTo(Long value) {
			addCriterion("TRIGGER_TIME >=", value, "triggerTime");
			return this;
		}

		public Criteria andTriggerTimeLessThan(Long value) {
			addCriterion("TRIGGER_TIME <", value, "triggerTime");
			return this;
		}

		public Criteria andTriggerTimeLessThanOrEqualTo(Long value) {
			addCriterion("TRIGGER_TIME <=", value, "triggerTime");
			return this;
		}

		public Criteria andTriggerTimeIn(List values) {
			addCriterion("TRIGGER_TIME in", values, "triggerTime");
			return this;
		}

		public Criteria andTriggerTimeNotIn(List values) {
			addCriterion("TRIGGER_TIME not in", values, "triggerTime");
			return this;
		}

		public Criteria andTriggerTimeBetween(Long value1, Long value2) {
			addCriterion("TRIGGER_TIME between", value1, value2, "triggerTime");
			return this;
		}

		public Criteria andTriggerTimeNotBetween(Long value1, Long value2) {
			addCriterion("TRIGGER_TIME not between", value1, value2,
					"triggerTime");
			return this;
		}

		public Criteria andTriggerNameIsNull() {
			addCriterion("TRIGGER_NAME is null");
			return this;
		}

		public Criteria andTriggerNameIsNotNull() {
			addCriterion("TRIGGER_NAME is not null");
			return this;
		}

		public Criteria andTriggerNameEqualTo(String value) {
			addCriterion("TRIGGER_NAME =", value, "triggerName");
			return this;
		}

		public Criteria andTriggerNameNotEqualTo(String value) {
			addCriterion("TRIGGER_NAME <>", value, "triggerName");
			return this;
		}

		public Criteria andTriggerNameGreaterThan(String value) {
			addCriterion("TRIGGER_NAME >", value, "triggerName");
			return this;
		}

		public Criteria andTriggerNameGreaterThanOrEqualTo(String value) {
			addCriterion("TRIGGER_NAME >=", value, "triggerName");
			return this;
		}

		public Criteria andTriggerNameLessThan(String value) {
			addCriterion("TRIGGER_NAME <", value, "triggerName");
			return this;
		}

		public Criteria andTriggerNameLessThanOrEqualTo(String value) {
			addCriterion("TRIGGER_NAME <=", value, "triggerName");
			return this;
		}

		public Criteria andTriggerNameLike(String value) {
			addCriterion("TRIGGER_NAME like", value, "triggerName");
			return this;
		}

		public Criteria andTriggerNameNotLike(String value) {
			addCriterion("TRIGGER_NAME not like", value, "triggerName");
			return this;
		}

		public Criteria andTriggerNameIn(List values) {
			addCriterion("TRIGGER_NAME in", values, "triggerName");
			return this;
		}

		public Criteria andTriggerNameNotIn(List values) {
			addCriterion("TRIGGER_NAME not in", values, "triggerName");
			return this;
		}

		public Criteria andTriggerNameBetween(String value1, String value2) {
			addCriterion("TRIGGER_NAME between", value1, value2, "triggerName");
			return this;
		}

		public Criteria andTriggerNameNotBetween(String value1, String value2) {
			addCriterion("TRIGGER_NAME not between", value1, value2,
					"triggerName");
			return this;
		}

		public Criteria andTriggerGroupIsNull() {
			addCriterion("TRIGGER_GROUP is null");
			return this;
		}

		public Criteria andTriggerGroupIsNotNull() {
			addCriterion("TRIGGER_GROUP is not null");
			return this;
		}

		public Criteria andTriggerGroupEqualTo(String value) {
			addCriterion("TRIGGER_GROUP =", value, "triggerGroup");
			return this;
		}

		public Criteria andTriggerGroupNotEqualTo(String value) {
			addCriterion("TRIGGER_GROUP <>", value, "triggerGroup");
			return this;
		}

		public Criteria andTriggerGroupGreaterThan(String value) {
			addCriterion("TRIGGER_GROUP >", value, "triggerGroup");
			return this;
		}

		public Criteria andTriggerGroupGreaterThanOrEqualTo(String value) {
			addCriterion("TRIGGER_GROUP >=", value, "triggerGroup");
			return this;
		}

		public Criteria andTriggerGroupLessThan(String value) {
			addCriterion("TRIGGER_GROUP <", value, "triggerGroup");
			return this;
		}

		public Criteria andTriggerGroupLessThanOrEqualTo(String value) {
			addCriterion("TRIGGER_GROUP <=", value, "triggerGroup");
			return this;
		}

		public Criteria andTriggerGroupLike(String value) {
			addCriterion("TRIGGER_GROUP like", value, "triggerGroup");
			return this;
		}

		public Criteria andTriggerGroupNotLike(String value) {
			addCriterion("TRIGGER_GROUP not like", value, "triggerGroup");
			return this;
		}

		public Criteria andTriggerGroupIn(List values) {
			addCriterion("TRIGGER_GROUP in", values, "triggerGroup");
			return this;
		}

		public Criteria andTriggerGroupNotIn(List values) {
			addCriterion("TRIGGER_GROUP not in", values, "triggerGroup");
			return this;
		}

		public Criteria andTriggerGroupBetween(String value1, String value2) {
			addCriterion("TRIGGER_GROUP between", value1, value2,
					"triggerGroup");
			return this;
		}

		public Criteria andTriggerGroupNotBetween(String value1, String value2) {
			addCriterion("TRIGGER_GROUP not between", value1, value2,
					"triggerGroup");
			return this;
		}
	}
}